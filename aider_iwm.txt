# Leaflet-Glify Internal World Model
Last updated: 2024-11-29
Updated by: AI Assistant
Focus: Critical WebGL initialization and type system issues

CURRENT STATUS: CRITICAL ISSUES
The codebase is experiencing significant problems with WebGL context initialization and type system coherence.

Key Problem Areas:

1. WebGL Context Initialization:
- Canvas creation and context acquisition is unreliable
- Multiple initialization attempts causing potential conflicts
- Inconsistent state management between parent/child classes
- Need to consolidate WebGL setup into a single, reliable flow

2. Type System Issues:
- Circular dependencies between type definitions
- Inconsistent property declarations between base and derived classes
- Missing or incorrect type assertions
- Overlapping interface definitions causing conflicts

3. Class Hierarchy Problems:
- BaseGlLayer initialization sequence is fragile
- Derived classes (IconPoints, etc.) have inconsistent super() calls
- Property initialization timing issues
- Event handler binding occurring too early

IMMEDIATE ACTION ITEMS:

1. WebGL Setup:
- Move all WebGL context initialization to BaseGlLayer
- Implement robust fallback mechanisms
- Add comprehensive error checking
- Ensure single source of truth for context creation

2. Type System:
- Separate interface definitions to prevent cycles
- Make property declarations consistent across hierarchy
- Add proper type guards and assertions
- Clean up redundant type definitions

3. Class Structure:
- Restructure initialization sequence
- Ensure proper super() call ordering
- Move property initialization to appropriate lifecycle points
- Defer event binding until after setup

STRATEGY:

1. Initialization Flow:
BaseGlLayer:
- Handle canvas creation
- Manage WebGL context
- Setup basic state
- Provide clear lifecycle hooks

Derived Classes:
- Focus on specific rendering logic
- Use parent class facilities
- Avoid duplicate initialization

2. Type Definitions:
- Keep interfaces focused and minimal
- Use composition over inheritance where possible
- Maintain clear boundaries between public/private APIs
- Document all assumptions and requirements

3. Error Handling:
- Add comprehensive checks
- Provide meaningful error messages
- Implement graceful fallbacks
- Log diagnostic information

NEXT STEPS:

1. Revert to last known good state
2. Implement changes incrementally
3. Add tests for each component
4. Validate changes in isolation
5. Document all assumptions and requirements

Remember:
• WebGL context creation is the foundation - must be solid
• Type system should help, not hinder development
• Class hierarchy needs to be logical and maintainable
